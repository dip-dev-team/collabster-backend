syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "base_models.proto";
import "gate_models.proto";
import "auth_models.proto";
import "user_models.proto";
import "project_models.proto";
import "task_models.proto";
import "time_tracking_models.proto";

package gate;

service AuthGateService {
  rpc SignInByEmail(auth.models.SignInEmailRequest)
      returns (auth.models.AuthReply) {
    option (google.api.http) = {
      post : "/auth/sign-in"
      body : "auth.models.SignInEmailRequest"
    };
  }

  rpc SignUpByEmail(auth.models.SignUpEmailRequest)
      returns (auth.models.AuthReply) {
    option (google.api.http) = {
      post : "/auth/sign-up"
      body : "auth.models.SignUpEmailRequest"
    };
  }

  rpc RefreshToken(auth.models.RefreshTokenRequest)
      returns (auth.models.AuthReply) {
    option (google.api.http) = {
      post : "/auth/refresh"
      body : "auth.models.RefreshTokenRequest"
    };
  }

  rpc RestorePassword(auth.models.RestorePasswordRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/auth/restore-password"
      body : "auth.models.RestorePasswordRequest"
    };
  }

  rpc VerifyEmail(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/profile/verify-email"
    };
  }
}

service ProfileGateService {
  rpc GetProfile(google.protobuf.Empty) returns (gate.models.ProfileReply) {
    option (google.api.http) = {
      get : "/profile"
    };
  }

  rpc UpdateProfile(user.models.UserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/profile"
      body : "user.models.UserRequest"
    };
  }

  rpc DeleteProfile(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/profile"
    };
  }
}

service TimeTrackingGateService {
  rpc GetTimeTrack(base.models.IdRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      get : "/time-tracks/{id}"
      body : "*"
    };
  }

  rpc GetTimeTracks(gate.models.FilterRequest)
      returns (time_tracking.models.TimeTracksReply) {
    option (google.api.http) = {
      get : "/time-tracks?limit={limit}&offset={offset}&search={search}"
      body : "*"
    };
  }

  rpc AddTimeTrack(gate.models.AddTimeTrackRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      post : "/time-tracks"
      body : "gate.models.AddTimeTrackRequest"
    };
  }

  rpc UpdateTimeTrack(time_tracking.models.UpdateTimeTrackRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      put : "/time-tracks/{id}"
      body : "time_tracking.models.UpdateTimeTrackRequest"
    };
  }

  rpc DeleteTimeTrack(base.models.IdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/time-tracks/{id}"
      body : "*"
    };
  }

  // Track

  rpc GetTracks(gate.models.FilterRequest)
      returns (time_tracking.models.TracksReply) {
    option (google.api.http) = {
      get : "/time-tracks/{id}/tracks"
      body : "*"
    };
  }

  rpc StartTrack(base.models.IdRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      post : "/time-tracks/{id}/start"
      body : "*"
    };
  }

  rpc StopTrack(base.models.IdRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      post : "/time-tracks/{id}/stop"
      body : "*"
    };
  }

  rpc DeleteTrack(time_tracking.models.DeleteTrackRequest)
      returns (time_tracking.models.TimeTrackReply) {
    option (google.api.http) = {
      delete : "/time-tracks/{id}/{idTrack}"
      body : "time_tracking.models.DeleteTrackRequest"
    };
  }
}